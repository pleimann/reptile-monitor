substitutions:
  devicename: monitor
  upper_devicename: Monitor

esphome:
  name: $devicename
  comment: "Reptile Controller - ${upper_devicename}"
  platform: ESP32
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.40.240
    gateway: 192.168.40.1
    subnet: 255.255.255.0

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

time:
  - platform: homeassistant
    id: esptime

# Enable Web server.
web_server:
  port: 80

binary_sensor:
  - platform: homeassistant
    entity_id: switch.wesley_lights
    id: wesley_lights
  - platform: homeassistant
    entity_id: switch.wesley_uth
    id: wesley_uth

  - platform: homeassistant
    entity_id: switch.winnie_lights
    id: winnie_lights
  - platform: homeassistant
    entity_id: switch.winnie_uth
    id: winnie_uth

  - platform: homeassistant
    entity_id: switch.waffle_lights
    id: waffle_lights
  - platform: homeassistant
    entity_id: switch.waffle_uth
    id: waffle_uth

  - platform: status
    name: "Node Status"
    id: system_status

  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode: INPUT_PULLUP
    name: "T-Display Button Input 0"
    id: tdisplay_button_input_0
    on_click:
      then:
        - lambda: |-
            if (id(selected_enclosure) < 2) {
              id(selected_enclosure) += 1;
            } else {
              id(selected_enclosure) = 0;
            }

        - component.update: oled_display

  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
      mode: INPUT_PULLUP
    name: "T-Display Button Input 1"
    id: tdisplay_button_input_1
    on_click:
      then:
        - homeassistant.service:
            service: switch.toggle
            # data:
            #   entity_id: switch.winnie_lights
            data_template:
              entity_id: switch.{{ selected_light_switch }}
            variables:
              selected_light_switch: |-
                switch(id(selected_enclosure)) {
                  case 0:
                    return "wesley_lights";
            
                  case 1:
                    return "winnie_lights";
            
                  case 2:
                    return "waffle_lights";
                }

        - component.update: oled_display

# We can still control the backlight independently
switch:
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight

sensor:
  - platform: homeassistant
    id: winnie_uth_temp
    entity_id: sensor.winnie_uth_temperature
    unit_of_measurement: '°F'

  - platform: homeassistant
    id: wesley_uth_temp
    entity_id: sensor.wesley_uth_temperature
    unit_of_measurement: '°F'

  - platform: homeassistant
    id: waffle_uth_temp
    entity_id: sensor.waffle_uth_temperature
    unit_of_measurement: '°F'

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

font:
  - file: "fonts/slkscr.ttf"
    id: slkscr_8
    size: 8
    glyphs: .:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz
  - file: "fonts/arial.ttf"
    id: arial_48
    size: 48
    glyphs: .:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz
  - file: "fonts/arial.ttf"
    id: arial_24
    size: 24
    glyphs: .:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz
  - file: "fonts/arial.ttf"
    id: arial_13
    size: 13
    glyphs: .:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz
  - file: "fonts/arial.ttf"
    id: arial_12
    size: 12
    glyphs: .:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz

image:
  - file: "images/lightbulb-off.png"
    id: lightbulb_off
    resize: 24x24
    type: BINARY
  - file: "images/lightbulb-on.png"
    id: lightbulb_on
    resize: 24x24
    type: BINARY
  - file: "images/uth-off.png"
    id: uth_off
    resize: 24x24
    type: BINARY
  - file: "images/uth-on.png"
    id: uth_on
    resize: 24x24
    type: BINARY

color:
  - id: color_red
    red: 100%
    green: 3%
    blue: 5%
  - id: color_cyan
    red: 0%
    green: 100%
    blue: 100%
  - id: color_yellow
    red: 100%
    green: 90%
    blue: 0%
  - id: color_white
    red: 90%
    green: 90%
    blue: 90%
  - id: color_black
    red: 0%
    green: 0%
    blue: 0%

# Example configuration entry
globals:
  - id: selected_enclosure
    type: int
    restore_value: no
    initial_value: '0'

display:
  - platform: st7789v
    id: oled_display
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 0°
    update_interval: 1s
    lambda: |-
      struct Enclosure {  
        char name[12];  
        float uth_temp;  
        bool lights_state;
        bool uth_state;  
      };

      int display_width = 135;
      int display_height = 240;

      it.strftime(3, 0, id(arial_13), id(color_cyan), "%x %I:%M:%S %p", id(esptime).now());
      
      const int row_height = 56;
      const int subrow_height = 25;
      
      Enclosure enclosures[] = {
        { "Wesley", id(wesley_uth_temp).state, id(wesley_lights).state, id(wesley_uth).state }, 
        { "Winnie", id(winnie_uth_temp).state, id(winnie_lights).state, id(winnie_uth).state },
        { "Waffle", id(waffle_uth_temp).state, id(waffle_lights).state, id(waffle_uth).state }
      };

      int x_offset = 10;
      int y_offset = 18;
      for (int i=0; i < 3; i++) {
        it.line(0, y_offset, display_width, y_offset);

        if(i == id(selected_enclosure)) {
          it.filled_rectangle(0, y_offset, x_offset - 2, row_height, id(color_white));
        }

        it.print(x_offset, y_offset + 2, id(arial_24), enclosures[i].name);
        
        if (enclosures[i].lights_state) {
          it.image(x_offset, y_offset + subrow_height + 2, id(lightbulb_on), id(color_black), id(color_yellow));
        } else {
          it.image(x_offset, y_offset + subrow_height + 2, id(lightbulb_off), id(color_black), id(color_white));
        }

        if (enclosures[i].uth_state) {
          it.printf(x_offset + 30, y_offset + subrow_height + 2, id(arial_24), id(color_red), "%.1f°F", enclosures[i].uth_temp);
        //  it.image(x_offset + 30, y_offset + 3 + subrow_height, id(uth_on), id(color_black), id(color_red));
        } else {
          it.printf(x_offset + 30, y_offset + subrow_height + 2, id(arial_24), id(color_white), "%.1f°F", enclosures[i].uth_temp);
        //  it.image(x_offset + 30, y_offset + 3 + subrow_height, id(uth_off), id(color_black), id(color_white));
        }

        y_offset += row_height;
      }
